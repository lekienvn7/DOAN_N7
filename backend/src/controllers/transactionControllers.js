import Repository from "../models/Repository.js";
import Material from "../models/Material.js";
import Equipment from "../models/Equipment.js";
import Transaction from "../models/Transaction.js";
import User from "../models/User.js";

/* L·∫§Y DANH S√ÅCH GIAO D·ªäCH */
export const getTransaction = async (req, res) => {
  try {
    const { repoID, materialID, equipmentID, type, userID } = req.query;

    const filter = {};

    // L·ªçc theo kho
    if (repoID) {
      const repo = await Repository.findOne({ repoID });
      if (!repo)
        return res
          .status(404)
          .json({ message: `Kho '${repoID}' kh√¥ng t·ªìn t·∫°i!` });
      filter.repository = repo._id;
    }

    // L·ªçc theo v·∫≠t t∆∞
    if (materialID) {
      const material = await Material.findOne({ materialID });
      if (!material)
        return res
          .status(404)
          .json({ message: `V·∫≠t t∆∞ '${materialID}' kh√¥ng t·ªìn t·∫°i!` });
      filter.material = material._id;
    }

    // L·ªçc theo thi·∫øt b·ªã
    if (equipmentID) {
      const equipment = await Equipment.findOne({ equipmentID });
      if (!equipment)
        return res
          .status(404)
          .json({ message: `Thi·∫øt b·ªã '${equipmentID}' kh√¥ng t·ªìn t·∫°i!` });
      filter.equipment = equipment._id;
    }

    // L·ªçc theo lo·∫°i giao d·ªãch
    if (type) {
      if (!["import", "export"].includes(type))
        return res
          .status(400)
          .json({ message: "Lo·∫°i giao d·ªãch kh√¥ng h·ª£p l·ªá!" });
      filter.type = type;
    }

    // L·ªçc theo ng∆∞·ªùi t·∫°o
    if (userID) {
      const user = await User.findOne({ userID });
      if (!user)
        return res
          .status(404)
          .json({ message: `Ng∆∞·ªùi d√πng '${userID}' kh√¥ng t·ªìn t·∫°i!` });
      filter.createdBy = user._id;
    }

    const transactions = await Transaction.find(filter)
      .populate("repository", "repoID repoName -_id")
      .populate("material", "materialID name type -_id")
      .populate("equipment", "equipmentID equipmentName type status -_id")
      .populate("createdBy", "userID fullName email -_id")
      .sort({ createdAt: -1 });

    if (!transactions.length) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng c√≥ giao d·ªãch n√†o ph√π h·ª£p!",
      });
    }

    res.status(200).json({
      success: true,
      count: transactions.length,
      message: "L·∫•y danh s√°ch giao d·ªãch th√†nh c√¥ng!",
      data: transactions,
    });
  } catch (error) {
    console.error("L·ªói khi g·ªçi getTransaction:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng!",
      error: error.message,
    });
  }
};

/* ------------------ TH√äM GIAO D·ªäCH (V·∫¨T T∆Ø / THI·∫æT B·ªä) ------------------ */
export const addTransaction = async (req, res) => {
  try {
    const {
      repository,
      material,
      equipment, 
      type,
      quantity,
      createdBy,
      note,
    } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (
      !repository ||
      (!material && !equipment) ||
      !type ||
      !quantity ||
      !createdBy
    ) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin giao d·ªãch!",
      });
    }

    const existingRepo = await Repository.findOne({ repoID: repository });
    if (!existingRepo) {
      return res.status(404).json({
        success: false,
        message: "Kho kh√¥ng t·ªìn t·∫°i!",
      });
    }

    const existingUser = await User.findOne({ userID: createdBy });
    if (!existingUser) {
      return res.status(404).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!",
      });
    }

    // Ki·ªÉm tra lo·∫°i (v·∫≠t t∆∞ ho·∫∑c thi·∫øt b·ªã)
    let targetItem = null;
    let itemType = "";

    if (material) {
      targetItem = await Material.findOne({ materialID: material });
      itemType = "material";
    } else if (equipment) {
      targetItem = await Equipment.findOne({ equipmentID: equipment });
      itemType = "equipment";
    }

    if (!targetItem) {
      return res.status(404).json({
        success: false,
        message: `${
          itemType === "material" ? "V·∫≠t t∆∞" : "Thi·∫øt b·ªã"
        } kh√¥ng t·ªìn t·∫°i!`,
      });
    }

    // T·∫°o m√£ giao d·ªãch t·ª± ƒë·ªông
    const count = await Transaction.countDocuments();
    const transactionID = `GD${count + 1}`;

    // üîπ X·ª≠ l√Ω thay ƒë·ªïi t·ªìn kho
    let beforeQuantity = 0;
    let afterQuantity = 0;

    if (itemType === "material") {
      // V·ªõi v·∫≠t t∆∞
      const matIndex = existingRepo.materials.findIndex(
        (m) => m.material.toString() === targetItem._id.toString()
      );

      if (matIndex === -1) {
        if (type === "export") {
          return res
            .status(400)
            .json({ message: "V·∫≠t t∆∞ ch∆∞a c√≥ trong kho ƒë·ªÉ xu·∫•t!" });
        }
        existingRepo.materials.push({ material: targetItem._id, quantity });
        afterQuantity = quantity;
      } else {
        beforeQuantity = existingRepo.materials[matIndex].quantity;
        if (type === "import") {
          existingRepo.materials[matIndex].quantity += quantity;
        } else {
          if (beforeQuantity < quantity) {
            return res
              .status(400)
              .json({ message: "Kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng v·∫≠t t∆∞ trong kho!" });
          }
          existingRepo.materials[matIndex].quantity -= quantity;
        }
        afterQuantity = existingRepo.materials[matIndex].quantity;
      }
    } else {
      // V·ªõi thi·∫øt b·ªã
      const eqIndex =
        existingRepo.equipments?.findIndex(
          (e) => e.equipment.toString() === targetItem._id.toString()
        ) ?? -1;

      if (eqIndex === -1) {
        if (type === "export") {
          return res
            .status(400)
            .json({ message: "Thi·∫øt b·ªã ch∆∞a c√≥ trong kho ƒë·ªÉ xu·∫•t!" });
        }
        existingRepo.equipments = existingRepo.equipments || [];
        existingRepo.equipments.push({ equipment: targetItem._id, quantity });
        afterQuantity = quantity;
      } else {
        beforeQuantity = existingRepo.equipments[eqIndex].quantity;
        if (type === "import") {
          existingRepo.equipments[eqIndex].quantity += quantity;
        } else {
          if (beforeQuantity < quantity) {
            return res
              .status(400)
              .json({ message: "Kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng thi·∫øt b·ªã trong kho!" });
          }
          existingRepo.equipments[eqIndex].quantity -= quantity;
        }
        afterQuantity = existingRepo.equipments[eqIndex].quantity;
      }
    }

    await existingRepo.save();

    // T·∫°o giao d·ªãch
    const transaction = await Transaction.create({
      transactionID,
      repository: existingRepo._id,
      material: itemType === "material" ? targetItem._id : null,
      equipment: itemType === "equipment" ? targetItem._id : null,
      type,
      quantity,
      createdBy: existingUser._id,
      beforeQuantity,
      afterQuantity,
      note,
    });

    res.status(201).json({
      success: true,
      message: `T·∫°o giao d·ªãch ${type === "import" ? "nh·∫≠p" : "xu·∫•t"} ${
        itemType === "material" ? "v·∫≠t t∆∞" : "thi·∫øt b·ªã"
      } th√†nh c√¥ng!`,
      data: transaction,
    });
  } catch (error) {
    console.error("L·ªói khi th√™m giao d·ªãch:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng!",
      error: error.message,
    });
  }
};
