import jwt from "jsonwebtoken";

// Middleware x√°c th·ª±c token
export const verifyToken = (req, res, next) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return res
        .status(403)
        .json({ success: false, message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" });
    }

    const token = authHeader.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    req.user = decoded; // ch·ª©a userID, role
    next();
  } catch (error) {
    res
      .status(403)
      .json({ success: false, message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
  }
};

// Middleware ki·ªÉm tra quy·ªÅn
export const authorizeRoles = (...allowedRoles) => {
  return (req, res, next) => {
    if (!allowedRoles.includes(req.user.roleName)) {
      return res
        .status(403)
        .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y!" });
    }
    next();
  };
};

export const checkRepositoryAccess = async (req, res, next) => {
  try {
    const repo = await Repository.findOne({
      repoID: req.params.repoID,
    }).populate("manager");
    if (!repo) {
      return res.status(404).json({ message: "Kho kh√¥ng t·ªìn t·∫°i!" });
    }

    // Qu·∫£n l√Ω t·ªïng kho => b·ªè qua ki·ªÉm tra
    if (req.user.roleName === "Qu·∫£n l√Ω t·ªïng") {
      req.repo = repo;
      return next();
    }

    // üîí Qu·∫£n l√Ω kho => ch·ªâ ƒë∆∞·ª£c thao t√°c kho m√¨nh ph·ª• tr√°ch
    if (repo.manager?._id.toString() !== req.user.id) {
      return res
        .status(403)
        .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p kho n√†y!" });
    }

    req.repo = repo; // l∆∞u repo l·∫°i ƒë·ªÉ controller c√≥ th·ªÉ d√πng
    next();
  } catch (error) {
    console.error("L·ªói checkRepositoryAccess:", error);
    res.status(500).json({ message: "L·ªói h·ªá th·ªëng!" });
  }
};
